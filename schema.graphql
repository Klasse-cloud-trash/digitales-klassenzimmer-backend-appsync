input CreateCourseInput {
  courseName: String!
  tags: [String]
  icon: String
  teachers: [ID]
  students: [ID]
  creationDate: AWSDateTime
  updateDateTime: AWSDateTime
}

input CreateUserInput {
  userName: String!
  displayName: String!
  email: AWSEmail
}

input DeleteCourseInput {
  id: ID!
}

input DeleteUserInput {
  id: ID!
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
  createCourse(input: CreateCourseInput!): course
  updateCourse(input: UpdateCourseInput!): course
  deleteCourse(input: DeleteCourseInput!): course
}

type Query {
  getUser(id: ID!): User
  listUsers(
    filter: TableUserFilterInput
    limit: Int
    nextToken: String
  ): UserConnection
  getCourse(id: ID!): course
  listCourses(
    filter: TableCourseFilterInput
    limit: Int
    nextToken: String
  ): courseConnection
}

type Subscription {
  onCreateUser(
    id: ID
    userName: String
    displayName: String
    email: AWSEmail
  ): User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser(
    id: ID
    userName: String
    displayName: String
    email: AWSEmail
  ): User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser(
    id: ID
    userName: String
    displayName: String
    email: AWSEmail
  ): User @aws_subscribe(mutations: ["deleteUser"])
  onCreateCourse(
    id: ID
    courseName: String
    tags: [String]
    icon: String
    teachers: [ID]
  ): course @aws_subscribe(mutations: ["createCourse"])
  onUpdateCourse(
    id: ID
    courseName: String
    tags: [String]
    icon: String
    teachers: [ID]
  ): course @aws_subscribe(mutations: ["updateCourse"])
  onDeleteCourse(
    id: ID
    courseName: String
    tags: [String]
    icon: String
    teachers: [ID]
  ): course @aws_subscribe(mutations: ["deleteCourse"])
}

input TableBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input TableCourseFilterInput {
  id: TableIDFilterInput
  courseName: TableStringFilterInput
  tags: TableStringFilterInput
  icon: TableStringFilterInput
  teachers: TableIDFilterInput
  students: TableIDFilterInput
  creationDate: TableStringFilterInput
  updateDateTime: TableStringFilterInput
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input TableIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input TableUserFilterInput {
  id: TableIDFilterInput
  userName: TableStringFilterInput
  displayName: TableStringFilterInput
  email: TableStringFilterInput
}

input UpdateCourseInput {
  id: ID!
  courseName: String
  tags: [String]
  icon: String
  teachers: [ID]
  students: [ID]
  creationDate: AWSDateTime
  updateDateTime: AWSDateTime
}

input UpdateUserInput {
  id: ID!
  userName: String
  displayName: String
  email: AWSEmail
}

type User {
  id: ID!
  userName: String!
  displayName: String!
  email: AWSEmail
}

type UserConnection {
  items: [User]
  nextToken: String
}

type course {
  id: ID!
  courseName: String!
  tags: [String]
  icon: String
  teachers: [ID]
  students: [ID]
  creationDate: AWSDateTime
  updateDateTime: AWSDateTime
}

type courseConnection {
  items: [course]
  nextToken: String
}
